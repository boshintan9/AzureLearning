{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": { 
        "adminPasswordPrefix": { // TODO: Implement a KeyVault solution - this is a terrible way to manage secrets.
            "type": "secureString",
            "minLength": 8,
            "defaultValue": "Training-",
            "metadata": {
                "description": "Administrator password prefix for the machine. The complete password is auto-generated and printed after deployment."
            }
        },
        "adminUsername": {
            "type": "string",
            "defaultValue": "Analyst",
            "metadata": {
                "description": "The Admin/User name for the analyst VM. Default is 'Analyst'"
            }
        },
        "bastionHostNamePrefix": {
            "type": "string",
            "defaultValue": "Bastion-Host",
            "metadata": {
                "description": "The first part of the Bastion host's name in Azure. The second part is set by the 'deploymentSuffix' parameter."
            }
        },
        "bastionNSGName": {
            "type": "string",
            "defaultValue": "Bastion-Access-NSG-",
            "metadata": {
                "description": "The name of the NSG providing Bastion host access to the training VM."
            }
        },
        "bastionPublicIpAddressNamePrefix": {
            "type": "string",
            "defaultValue": "Bastion-IP-",
            "metadata": {
                "description": "The first part of the external IP address Azure name used by the Bastion host. The second part is set by the 'deploymentSuffix' parameter."
            }
        },
        "deploymentSuffix": {
            "type": "string",
            "defaultValue": "[utcNow('yyMMdd')]",
            "minLength": 3,
            "metadata": {
                "description": "The default value is a 6 character YearMonthDay number, e.g. 210110 . This number is used to complete the names of most resources throughout the template. Change it to something more meaningfull if you want to."
            }
        },
        "hostSubnetName": {
            "type": "string",
            "defaultValue": "Training-Hosts",
            "metadata": {
                "description": "Name of the subnet that contains the training host(s)."
            }
        },
        "internetNatNamePrefix": {
            "type": "string",
            "defaultValue": "Internet-NAT-Gateway-",
            "metadata": {
                "description": "The first part of the name for the NAT gateway resource providing internet to the training VM. The second part is set by the 'deploymentSuffix' parameter"
            }
        },
        "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
                "description": "The resources location in Azure. Will default to the resource location for the Resource Group."
            }
        },
        "natIPAddressNamePrefix": {
            "type": "string",
            "defaultValue": "Internet-NAT-IP-",
            "metadata": {
                "description": "The first part of the name for the public IP address for the NAT gateway for host internet traffic. The second part is set by the 'deploymentSuffix' parameter"
            }
        },
        "networkInterfacePrefix": {
            "type": "string",
            "defaultValue": "Windows-Int-",
            "metadata": {
                "description": "The first part of the name of the network interface attached to the analysis VM. The second part is set by the 'deploymentSuffix' parameter."
            }
        },
        "storageAccountNamePrefix": {
            "type": "string",
            "minLength": 3,
            "maxLength": 11,
            "defaultValue": "StorageAcct",
            "metadata": {
                "description": "The first part of the name for the analysis VM's storage account. The second part is randomised to avoid deployment issues."
            }
        },
        "virtualMachineComputerName": {
            "type": "string",
            "defaultValue": "win10-forensics",
            "minLength": 1,
            "maxLength": 15,
            "metadata": {
                "description": "The name of the Windows host (in OS). Cannot be longer than 15 characters." 
            }
        },
        "virtualMachineNamePrefix": {
            "type": "string",
            "defaultValue": "Windows-Analysis-VM-",
            "metadata": {
                "description": "The first part of the name for the analysis VM (in Azure). The second part is set by the 'deploymentSuffix' parameter."
            }
        },
        "virtualMachineSize": {
            "type": "string",
            "defaultValue": "Standard_D4s_v3",
            "metadata": {
                "description": "The 'hardware' specifications for the VM. The default value provides a VM with 4 vCPUs and 16GB RAM."
            }
        },
        "virtualNetworkNamePrefix": {
            "type": "String",
            "defaultValue": "TrainingNet-"

        },
        "vmOsDiskType": {
            "type": "string",
            "defaultValue": "StandardSSD_LRS",
            "metadata": {
                "description": "The analysis VM's OS disk grade - there are a bunch of available options."
            }

        }
    },
    "variables": { 
        "adminPassword": "[concat(parameters('adminPasswordPrefix'), uniqueString(resourceGroup().id, deployment().name))]",
        "bastionHostName": "[concat(parameters('bastionHostNamePrefix'), parameters('deploymentSuffix'))]",
        "bastionPublicIpAddressName": "[concat(parameters('bastionPublicIpAddressNamePrefix'), parameters('deploymentSuffix'))]",
        "bastionHostSubnetName": "AzureBastionSubnet", // This name should alway be "AzureBastionSubnet" - Bastions expect it will exist when they are attached to a vnet.
        "internetNatName": "[concat(parameters('internetNatNamePrefix'), parameters('deploymentSuffix'))]",
        "natIPAddressName": "[concat(parameters('natIPAddressNamePrefix'), parameters('deploymentSuffix'))]",
        "networkInterfaceName": "[concat(parameters('networkInterfacePrefix'), parameters('deploymentSuffix'))]",
        "storageAccountName": "[concat(parameters('storageAccountNamePrefix'), uniqueString(resourceGroup().id))]",
        "virtualMachineName": "[concat(parameters('virtualMachineNamePrefix'), parameters('deploymentSuffix'))]",
        "vnetName": "[concat(parameters('virtualNetworkNamePrefix'), parameters('deploymentSuffix'))]"
    },
    "resources": [ // TODO: Add in tags for all resources
        { // To be honest, I'm not sure this NSG actually does that much.
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[parameters('bastionNSGName')]",
            "location": "[parameters('location')]",
            "apiVersion": "2020-05-01",
            "properties": {
                "securityRules": [
                    {
                        "name": "Bastion_In",
                        "properties": {
                            "description": "Allows bastion host access into VM",
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "10.1.254.0/24",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound",
                            "sourcePortRanges": [],
                            "destinationPortRanges": [
                                "22",
                                "3389"
                            ],
                            "sourceAddressPrefixes": [],
                            "destinationAddressPrefixes": []
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/publicIpAddresses",
            "name": "[variables('bastionPublicIpAddressName')]",
            "location": "[parameters('location')]",
            "apiVersion": "2019-02-01",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAllocationMethod": "Static"
            },
            "tags": {}
        },
        {
            "type": "Microsoft.Network/publicIpAddresses",
            "name": "[variables('natIPAddressName')]",
            "location": "[parameters('location')]",
            "apiVersion": "2019-02-01",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAllocationMethod": "Static"
            }
        },
        {
            "type": "Microsoft.Network/natGateways",
            "name": "[variables('internetNATName')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "tags": {},
            "zones": [],
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAddresses": [
                    {
                        "id": "[resourceId('Microsoft.Network/publicIpAddresses/', variables('natIPAddressName'))]"
                    }
                ],
                "idleTimeoutInMinutes": 4
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIpAddresses/', variables('natIPAddressName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('vnetName')]",
            "location": "[parameters('location')]",
            "apiVersion": "2020-05-01",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('bastionNSGName'))]",
                "[resourceId('Microsoft.Network/natGateways/', variables('internetNatName'))]"
            ],
            "tags": {
                "training": "network"
            },
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "10.1.0.0/16"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('bastionHostSubnetName')]",
                        "properties": {
                            "addressPrefix": "10.1.254.0/24",
                            "serviceEndpoints": [],
                            "delegations": [],
                            "privateEndpointNetworkPolicies": "Enabled",
                            "privateLinkServiceNetworkPolicies": "Enabled"
                        }
                    },
                    {
                        "name": "[parameters('hostSubnetName')]",
                        "properties": {
                            "addressPrefix": "10.1.1.0/24",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('bastionNSGName'))]"
                            },
                            "serviceEndpoints": [
                                {
                                    "service": "Microsoft.KeyVault",
                                    "locations": [
                                        "*"
                                    ]
                                },
                                {
                                    "service": "Microsoft.Storage",
                                    "locations": [
                                        "[parameters('location')]"
                                    ]
                                }
                            ],
                            "delegations": [],
                            "privateEndpointNetworkPolicies": "Disabled",
                            "privateLinkServiceNetworkPolicies": "Enabled",
                            "natGateway": {
                                "id": "[resourceId('Microsoft.Network/natGateways/', variables('internetNatName'))]"
                            }
                        }
                    }
                ],
                "virtualNetworkPeerings": [],
                "enableDdosProtection": false,
                "enableVmProtection": false
            }
        },
        {
            "type": "Microsoft.Network/bastionHosts",
            "name": "[variables('bastionHostName')]",
            "location": "[parameters('location')]",
            "apiVersion": "2018-10-01",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
                "[resourceId('Microsoft.Network/publicIpAddresses', variables('bastionPublicIpAddressName'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "IpConf",
                        "properties": {
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('bastionHostSubnetName'))]"
                            },
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIpAddresses', variables('bastionPublicIpAddressName'))]"
                            }
                        }
                    }
                ]
            },
            "tags": {}
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-06-01",
            "name": "[variables('storageAccountName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard_LRS" // We don't need fancy availability for training or options, no parameter is used here.
            },
            "kind": "Storage",
            "properties": {}
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('networkInterfaceName')]",
            "apiVersion": "2018-10-01",
            "location": "[parameters('location')]",
            "dependsOn": [
              "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"  
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), parameters('hostSubnetName'))]"
                            },
                            "privateIPAllocationMethod": "Dynamic"
                        }
                    }
                ]
            },
            "tags": {
                "training": "analyst-host"
            }
        },
        {
            "name": "[variables('virtualMachineName')]",
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2020-06-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                "[resourceId('Microsoft.Network/networkInterfaces/', variables('networkInterfaceName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                    "osDisk": {
                        "createOption": "fromImage",
                        "managedDisk": {
                            "storageAccountType": "[parameters('vmOsDiskType')]"
                        }
                    },
                    "imageReference": {
                        "publisher": "MicrosoftWindowsDesktop",
                        "offer": "Windows-10",
                        "sku": "20h1-pro-g2",
                        "version": "latest"
                    },
                    "dataDisks": [
                        {
                            "diskSizeGB": 1024,
                            "lun": 0,
                            "createOption": "Empty"
                        }
                    ]
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
                        }
                    ]
                },
                "osProfile": {
                    "computerName": "[parameters('virtualMachineComputerName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[variables('adminPassword')]",
                    "windowsConfiguration": {
                        "enableAutomaticUpdates": true,
                        "provisionVmAgent": true,
                        "patchSettings": {
                            "patchMode": "AutomaticByOS" // I'm not interested in letting the user determine patching.
                        }
                    }
                },
                "licenseType": "Windows_Client", // This is fine for VS subscriptions, but we need to work out our Org obligations with regards to licencing.
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true
                    }
                }
            },
            "tags": {
                "training": "analyst-host"
            }
        }
    ],
    "outputs": {
        "adminUsername": {
            "type": "string",
            "value": "[parameters('adminUsername')]"
        },
        "generatedPassword": {
            "type": "string",
            "value": "[variables('adminPassword')]"
        }
    }
}